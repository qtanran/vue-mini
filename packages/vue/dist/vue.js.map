{"version":3,"file":"vue.js","sources":["../../reactivity/src/baseHandlers.ts","../../reactivity/src/reactive.ts"],"sourcesContent":["/**\n * 响应性的 handler\n */\nexport const mutableHandlers = {};\n","import { mutableHandlers } from './baseHandlers';\n/**\n * 响应性 Map 缓存对象\n * key: target\n * val: proxy\n */\nexport const reactiveMap = new WeakMap();\n/**\n * 为复杂数据类型，创建响应性对象\n * @param target\n * @return 代理对象\n */\nexport function reactive(target) {\n    return createReactiveObject(target, mutableHandlers, reactiveMap);\n}\n/**\n * 创建响应性对象\n * @param target 被代理对象\n * @param baseHandlers\n * @param proxyMap\n */\nfunction createReactiveObject(target, baseHandlers, proxyMap) {\n    // 如果该实例已经被代理，直接读取即可\n    const existingProxy = proxyMap.get(target);\n    if (existingProxy) {\n        return existingProxy;\n    }\n    // 未被代理则生成 proxy 实例\n    const proxy = new Proxy(target, baseHandlers);\n    // 缓存代理对象\n    proxyMap.set(target, proxy);\n    return proxy;\n}\n"],"names":[],"mappings":";;;IAAA;IACA;IACA;IACO,MAAM,eAAe,GAAG,EAAE;;ICFjC;IACA;IACA;IACA;IACA;IACO,MAAM,WAAW,GAAG,IAAI,OAAO,EAAE,CAAC;IACzC;IACA;IACA;IACA;IACA;IACO,SAAS,QAAQ,CAAC,MAAM,EAAE;IACjC,IAAI,OAAO,oBAAoB,CAAC,MAAM,EAAE,eAAe,EAAE,WAAW,CAAC,CAAC;IACtE,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACA,SAAS,oBAAoB,CAAC,MAAM,EAAE,YAAY,EAAE,QAAQ,EAAE;IAC9D;IACA,IAAI,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAC/C,IAAI,IAAI,aAAa,EAAE;IACvB,QAAQ,OAAO,aAAa,CAAC;IAC7B,KAAK;IACL;IACA,IAAI,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;IAClD;IACA,IAAI,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAChC,IAAI,OAAO,KAAK,CAAC;IACjB;;;;;;;;;;;;"}